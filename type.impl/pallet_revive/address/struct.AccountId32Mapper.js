(function() {
    var type_impls = Object.fromEntries([["revive_env",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddressMapper%3CT%3E-for-AccountId32Mapper%3CT%3E\" class=\"impl\"><a href=\"#impl-AddressMapper%3CT%3E-for-AccountId32Mapper%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AddressMapper&lt;T&gt; for AccountId32Mapper&lt;T&gt;<div class=\"where\">where\n    T: Config&lt;AccountId = AccountId32&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_address\" class=\"method trait-impl\"><a href=\"#method.to_address\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_address</a>(account_id: &amp;AccountId32) -&gt; H160</h4></section></summary><div class='docblock'>Convert an account id to an ethereum address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_account_id\" class=\"method trait-impl\"><a href=\"#method.to_account_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_account_id</a>(address: &amp;H160) -&gt; AccountId32</h4></section></summary><div class='docblock'>Convert an ethereum address to a native account id.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_fallback_account_id\" class=\"method trait-impl\"><a href=\"#method.to_fallback_account_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_fallback_account_id</a>(address: &amp;H160) -&gt; AccountId32</h4></section></summary><div class='docblock'>Same as [<code>Self::to_account_id</code>] but always returns the fallback account. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>(account_id: &amp;&lt;T as Config&gt;::AccountId) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class='docblock'>Create a stateful mapping for <code>account_id</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_no_deposit\" class=\"method trait-impl\"><a href=\"#method.map_no_deposit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map_no_deposit</a>(\n    account_id: &amp;&lt;T as Config&gt;::AccountId,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class='docblock'>Map an account id without taking any deposit.\nThis is only useful for genesis configuration, or benchmarks.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unmap\" class=\"method trait-impl\"><a href=\"#method.unmap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">unmap</a>(account_id: &amp;&lt;T as Config&gt;::AccountId) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, DispatchError&gt;</h4></section></summary><div class='docblock'>Remove the mapping in order to reclaim the deposit. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_mapped\" class=\"method trait-impl\"><a href=\"#method.is_mapped\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_mapped</a>(account_id: &amp;&lt;T as Config&gt;::AccountId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the <code>account_id</code> is usable as an origin. <a>Read more</a></div></details></div></details>","AddressMapper<T>","revive_env::runtime::AccountId"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4350]}