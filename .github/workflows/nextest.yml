name: nextest

on:
  workflow_call:
    inputs:
      profile:
        required: true
        type: string

concurrency:
  group: tests-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RESOLC_VERSION: 0.3.0
  DLRP_API_KEY: ${{ secrets.DLRP_API_KEY }}
  ETHERSCAN_API_KEYS: ${{ secrets.ETHERSCAN_API_KEYS }}
  ETH_RPC_VERSION: 0.5.0
  SUBSTRATE_NODE_COMMIT_SHA: f4dba53bfac614b054735aa725d2b0c44efda414

jobs:
  matrices:
    name: build matrices
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.gen.outputs.test-matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Generate matrices
        id: gen
        env:
          EVENT_NAME: ${{ github.event_name }}
          PROFILE: ${{ inputs.profile }}
        run: |
          output=$(python3 .github/scripts/matrices.py)
          echo "::debug::test-matrix=$output"
          echo "test-matrix=$output" >> $GITHUB_OUTPUT

  cache-binaries:
    name: cache binaries (${{ matrix.os }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
          - os: macos
            runner: macos-latest
          - os: windows
            runner: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Check existing caches first
      - name: Cache substrate-node binary
        id: cache-substrate
        uses: actions/cache@v4
        with:
          path: polkadot-sdk/target/release/substrate-node${{ matrix.os == 'windows' && '.exe' || '' }}
          key: substrate-node-${{ matrix.runner }}-${{ env.SUBSTRATE_NODE_COMMIT_SHA }}

      - name: Cache eth-rpc binary
        id: cache-ethrpc
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/eth-rpc${{ matrix.os == 'windows' && '.exe' || '' }}
          key: eth-rpc-${{ matrix.runner }}-${{ env.ETH_RPC_VERSION }}

      # Install dependencies for building
      - name: Install protobuf-compiler
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # macOS-specific setup
      - name: Install libusb 1.0.27 (macOS)
        if: matrix.os == 'macos'
        run: |
          brew install autoconf automake libtool pkg-config
          wget https://github.com/libusb/libusb/releases/download/v1.0.27/libusb-1.0.27.tar.bz2
          tar -xvjf libusb-1.0.27.tar.bz2
          cd libusb-1.0.27
          ./configure --prefix=/usr/local
          make
          sudo make install

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}, wasm32v1-none
          components: rust-src

      # Build substrate-node (if not cached)
      - name: Build substrate-node
        if: steps.cache-substrate.outputs.cache-hit != 'true' && matrix.os != 'windows'
        run: |
          git init polkadot-sdk
          cd polkadot-sdk
          git remote add origin https://github.com/paritytech/polkadot-sdk
          git fetch --depth 1 origin ${{ env.SUBSTRATE_NODE_COMMIT_SHA }}
          git checkout FETCH_HEAD
          cargo build --release --bin substrate-node

      # Install eth-rpc proxy (if not cached)
      - name: Install eth-rpc proxy
        if: steps.cache-ethrpc.outputs.cache-hit != 'true' && matrix.os != 'windows'
        run: cargo install pallet-revive-eth-rpc --version ${{ env.ETH_RPC_VERSION }} --locked

      # Verify binaries exist
      - name: Verify binaries
        if: matrix.os != 'windows'
        run: |
          echo "=== Substrate binary ==="
          ls -lh polkadot-sdk/target/release/substrate-node || echo "substrate-node not found"
          echo "=== eth-rpc binary ==="
          ls -lh ~/.cargo/bin/eth-rpc || echo "eth-rpc not found"

  test:
    name: test ${{ matrix.name }}
    runs-on: ${{ matrix.runner_label }}
    timeout-minutes: 60
    needs: [matrices, cache-binaries]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrices.outputs.test-matrix) }}
    env:
      ETH_RPC_URL: https://eth-mainnet.alchemyapi.io/v2/${{ secrets.ALCHEMY_API_KEY }}
      CARGO_PROFILE_DEV_DEBUG: 0
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@nextest

      - name: Restore substrate-node binary
        uses: actions/cache/restore@v4
        with:
          path: polkadot-sdk/target/release/substrate-node${{ contains(matrix.runner_label, 'windows') && '.exe' || '' }}
          key: substrate-node-${{ matrix.runner_label }}-${{ env.SUBSTRATE_NODE_COMMIT_SHA }}
          fail-on-cache-miss: ${{ !contains(matrix.runner_label, 'windows') }}

      - name: Restore eth-rpc binary
        uses: actions/cache/restore@v4
        with:
          path: ~/.cargo/bin/eth-rpc${{ contains(matrix.runner_label, 'windows') && '.exe' || '' }}
          key: eth-rpc-${{ matrix.runner_label }}-${{ env.ETH_RPC_VERSION }}
          fail-on-cache-miss: ${{ !contains(matrix.runner_label, 'windows') }}

      - name: Setup Node.js
        if: contains(matrix.name, 'external')
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Bun
        if: contains(matrix.name, 'external') && !contains(matrix.runner_label, 'windows')
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install Vyper
        run: pip --version && pip install vyper==0.4.3
      - name: Install Resolc
        run: |
          cargo install rvm-rs
          rvm install ${{ env.RESOLC_VERSION }}
          rvm use ${{ env.RESOLC_VERSION }}

      - name: Add substrate-node to $PATH
        run: echo "${{github.workspace}}/polkadot-sdk/target/release" >> $GITHUB_PATH

      - name: Check Resolc Version
        run: resolc --version

      - name: Forge RPC cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry/cache
            ~/.config/.foundry/cache
          key: rpc-cache-${{ hashFiles('crates/forge/tests/rpc-cache-keyfile') }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Setup Git config
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global url."https://github.com/".insteadOf "git@github.com:"

      # Install dependencies for building
      - name: Install protobuf-compiler
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32v1-none
          components: rust-src

      - name: Test
        env:
          SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
          HTTP_ARCHIVE_URLS: ${{ secrets.HTTP_ARCHIVE_URLS }}
          WS_ARCHIVE_URLS: ${{ secrets.WS_ARCHIVE_URLS }}
        run: cargo nextest run ${{ matrix.flags }}
